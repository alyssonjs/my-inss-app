<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <div class="container-fluid">
  <i class="fas fa-user-cog fa-2x mt-1" ></i>
    <a class="navbar-brand" style="margin-left: 10px">Editar informações</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavDropdown">
    </div>
  </div>
</nav>
  <hr class="mt-2" style="background-color: black">
<div class="col-sm-8 col-md-8 offset-md-2 offset-sm-2 col-8 offset-2">
<%= form_with(model: @collaborator, remote: true) do |form| %>
  <% if @collaborator.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@collaborator.errors.count, "error") %> prohibited this collaborator from being saved:</h2>

      <ul>
      <% @collaborator.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

    <input type="hidden" name="authenticity_token" value="<%=form_authenticity_token%>">
    <input type="hidden" name="user_id" value="<%=@current_user.id%>">
    <div class="row">
    <div class="card"  style="border-radius: 15px">
        <div class="card-header  border-5 border-warning" style="height: 30px; margin-bottom: -10px; background: #41C1E8">
            <h4 class="card-title" style="margin-top: -10px; color: white" >
                Dados Pessoais
            </h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6 mt-2">
                    <label for="inputName" class="form-label offset-2">Nome completo</label>
                    <div class="col-lg-10 col-10 offset-2">
                        <%= form.text_field :name, :class => "form-control form-control-sm"%>
                    </div>
                </div>
                <div class="col-6">
                    <label for="inputCPF" class="col-sm-4 col-form-label">CPF</label>
                    <div class="col-lg-8 col-8">
                        <%= form.text_field :cpf, :class => "form-control form-control-sm", :oninput => "javascript: fMasc( this, mCPF )" %>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="mb-1 col-12">
                        <label for="inputDate" class="col-sm-8 offset-2 col-form-label">Data de Nascimento</label>
                        <div class="col-lg-8 col-8 offset-2">
                            <%= form.date_field :birthday, :class => "form-control form-control-sm", :type => "date" %>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6 mt-2">
                    <label for="inputName" class="form-label offset-2">Salário</label>
                    <div class="col-lg-10 col-10 offset-2">
                            <%= form.text_field :salary, :class => "form-control form-control-sm salary", :onChange => "javascript: getValue(this)" %>
                    </div>
                </div>
                <div class="col-6">
                    <label for="inputCPF" class="col-sm-5 col-md-8  col-form-label ">Desconto do INSS</label>
                    <div class="col-lg-8 col-8">
                        <%= form.text_field :inss, :class => "form-control form-control-sm inss", :readonly => "true" %>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                        <label for="tel" class="col-sm-4 col-md-8 col-form-label offset-2">Seu telefone</label>
                        <div class="col-lg-10 col-10 offset-2">
                                <%= form.text_field :personal_phone_number, :class => "form-control form-control-sm phone", :oninput => "javascript: maskNumber(this) " %>
                        </div>
                </div>
                <div class="col-6 ">
                        <label for="tel" class="col-sm-6 col-md-8 col-form-label">Contato Referencial</label>
                        <div class="col-lg-8 col-8">
                            <%= form.text_field :reference_phone_number, :class => "form-control form-control-sm phone", :oninput => "javascript: maskNumber(this) "%>
                        </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <div class="row mt-3">
    <div class="card" style="border-radius: 15px">
        <div class="card-header  border-5 border-warning" style="height: 30px; margin-bottom: -10px; background: #41C1E8">
            <h4 class="card-title" style="margin-top: -10px; color: white" >
                Endereço
            </h4>
        </div>
        <div class="card-body">
            <div class="row">
                <small class=" offset-3 font-bold"> Digite seu cep para preenchimento automatico </small>
                <div class="mb-1  col-4">
                    <label for="inputPostalCode" class="col-sm-4 col-form-label offset-3">CEP</label>
                    <div class="col-lg-8 col-8 offset-3">
                        <%= form.text_field :postal_code, :class => "form-control form-control-sm", :onInput => "javascript: maskCep(this)", :onChange => "javascript: getAddress(this.value)" %> 
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="mb-1 col-4">
                        <label for="inputState" class="col-sm-10 col-form-label offset-3">Estado</label>
                        <div class="col-lg-8 col-10 offset-3">
                            <%= form.text_field :state, :class => "form-control form-control-sm state" %>
                        </div>
                </div>
                <div class="mb-1  col-2">
                        <label for="inputCity" class="col-sm-12 col-form-label">Cidade</label>
                        <div class="col-lg-12 col-12">
                            <%= form.text_field :city, :class => "form-control form-control-sm city" %>
                        </div>
                </div>
                <div class="mb-1  col-4">
                    <label for="inputNeighborhood" class="col-sm-4 col-form-label">Bairro</label>
                    <div class="col-lg-8 col-8">
                        <%= form.text_field :neighborhood, :class => "form-control form-control-sm neighborhood" %>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="mb-1  col-4">
                        <label for="inputAddress" class="col-sm-4 col-form-label offset-3">Rua</label>
                        <div class="col-lg-8 col-8 offset-3">
                            <%= form.text_field :address, :class => "form-control form-control-sm address" %>
                        </div>
                </div>
                <div class="mb-1 col-2">
                        <label for="inputNumber" class="col-sm-12 col-form-label">Numero</label>
                        <div class="col-lg-12 col-12">
                            <%= form.number_field :number, :class => "form-control form-control-sm" %>
                        </div>
                </div>
            </div>
        </div>
    </div>
         <div class="row mt-2 mb-2">
                <div class="col offset-3">
                    <%= link_to 'Voltar', collaborators_path, :class => "btn border-1 waves-effect waves-light border-primary" %>
                </div>
                <div class="col">
                    <%= button_to 'Salvar', collaborators_path, :remote => true, :class => "btn border-1 waves-effect waves-light border-primary", :style => "background: #41C1E8; color: white" %>
                </div>
            </div>
<% end %>
</div>
<script type="text/javascript">
    var salary, inss, address, neighborhood, city, state, states, cities, newCollaborator

    if (!salary) salary = document.querySelector('.salary')
    if (!inss) inss =  document.querySelector('.inss')
    if (!address) address = document.querySelector('.address')
    if (!neighborhood) neighborhood = document.querySelector('.neighborhood')
    if (!city) city = document.querySelector('.city')
    if (!state) state = document.querySelector('.state')
    if (!newCollaborator) newCollaborator = document.querySelector('.new-collaborator')

    salary.addEventListener('change', (event) => {

        let value = salary.value.replace("R$","").replace(".", "")
        
        value = String(value)

        const url = `/collaborators/call/${value}`;
        let xhr = new XMLHttpRequest();
        xhr.onreadystatechange = () => {
                if(xhr.readyState == 4){
                    inss.value = currency(xhr.response)
                }else{

                }
            }

        xhr.open("GET", url )

        xhr.send()
    });

    function ValidaCPF(){	
        var cpf = document.querySelector(".cpf").value; 
        var cpfValido = /^(([0-9]{3}.[0-9]{3}.[0-9]{3}-[0-9]{2})|([0-9]{11}))$/;

        if (cpfValido.test(cpf) == true)	{ 
            console.log("CPF Válido");	
        } else	{	 
            console.log("CPF Inválido");	
        }
    }

    function fMasc(objeto,mascara) {
        obj = objeto
        masc = mascara
        setTimeout("fMascEx()",1)
    }

    function fMascEx() {
        obj.value = masc(obj.value)
    }

    function mCPF(cpf){
        var max_chars = 14;
        if(typeof cpf == 'number') return cpf = ''
        if(cpf.length > max_chars) {
            return cpf = cpf.substr(0, max_chars);
        }else{
        cpf = cpf.replace(/\D/g,"")
        cpf = cpf.replace(/(\d{3})(\d)/,"$1.$2")
        cpf = cpf.replace(/(\d{3})(\d)/,"$1.$2")
        cpf = cpf.replace(/(\d{3})(\d{1,2})$/,"$1-$2")

        return cpf    
        }
    }

    function getValue(input) {
        return input.value = currency(input.value)
    }

    function currency(value) {
        value = Number(value.replace(".","").replace("R$", "").replace(",",".")).toLocaleString('pt-BR')
        return value = `R$ ${value}`
    }

    function maskNumber(input){
        let value = input.value.replace(/\D/g, '').match(/(\d{0,2})(\d{0,5})(\d{0,4})/);
        return input.value = !value[2] ? value[1] : '(' + value[1] + ') ' + value[2] + (value[3] ? '-' + value[3] : '');
    };

    function maskCep(input){
        let value = input.value.replace(/\D/g, '').match(/(\d{0,2})(\d{0,3})(\d{0,3})/);
        return input.value = !value[2] ? value[1] : value[1] + '.' + value[2] + (value[3] ? '-' + value[3] : '');
    };

    function getAddress(cep) {
        cep = cep.replace(".","").replace("-","")
        if(cep.length != 8 ) return
        const url = `https://viacep.com.br/ws/${cep}/json/`;
        let xhr = new XMLHttpRequest();
        xhr.onreadystatechange = () => {
            if(xhr.readyState == 4){
                let result = JSON.parse(xhr.response)
                address.value = result.logradouro
                city.value = result.localidade
                neighborhood.value = result.bairro
                state.value = result.uf
            }else{
              
            }
        }

        xhr.open("GET", url )

        xhr.send()
    }

</script>